

음성 쳇봇 웹앱 'GPTalk' 만들기 

# GPTalk-1.html 생성 프롬프트 


# 한글로 답하고 주석을  달것
# 타이틀 GPTalk
# h1 타이틀 
# 주어진는 코드를 보고 GPTalk api 사용될 프론트엔드 코드(html,javascript)를 만들어주세요.
# jquery 3.6 버전, 부트스크랩 5.3.2 버전을 사용하여 사용자 인터페이스를 구축합니다.
# https://kit.fontawesome.com/3831909d96.js 아이콘을 사용하여 UI/UX 디자인을 향상시킵니다.
# 글자체는 나눔고딕체로 하고 기본 폰트크기를 1.2em으로 한다
# 부트스크랩 class를 효율적으로 활용하여 보기좋게 화면을 반응형으로 디자인 할것
# 특히, 스마트폰에서도 디자인이 잘 반응하도록 구성

   GPT-4( model="gpt-4-vision-preview")에 
   질의할 내용을 마이크를 통해 사용자의 음성으로 수집
   마이크 음성 대기중에는 fontawesome의 마이크 폰트를 사용하여 ui/ux 고려한다.
   마이이크 입력 중 3 초가 입력이 없는 경우는 
   Google 음성 인식이 모듈을 이용 텍스트로 변환.
   api /GPTalk  전송 
   API 응답 대기중일때 적절한 spinner를 사용한다.

   프론트엔드에서  음성 데이터(Base64)
   프론트엔드에서 웹앱에서 수신 재생

다음은 백엔드 코드이다. 반드시 참고한다.


@app.route("/GPTalk", methods=["POST"])
def GPT_Talk():
    promt= request.json.get("promt")
    voice= request.json.get("voice")
    print("promt= ", promt)
    re=ds.gptalk(promt=promt,voice=voice)
    print( re.content)
    return jsonify(re)

# ds.gptalk
def gptalk( query="",voice="shimmer"):
    client = OpenAI()
    prompt=[{"role": "user", "content": query }]    
    response  = client.chat.completions.create(
                                model="gpt-4-vision-preview",
                                messages=prompt,
                                 max_tokens=1000,
     ) 
    ans=response.choices[0].message.content 
    
    #speech_file_path = f"{folder('talkAI')}//speech.mp3"
    response = client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=ans)
    # response.stream_to_file(speech_file_path)
    encoded_audio = base64.b64encode(response.content).decode('utf-8')     
    re={
        "content":ans,
        "audio_base64":encoded_audio
    }
    return re



